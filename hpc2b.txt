#include <iostream>
#include <omp.h>

using namespace std;

void merge(int array[], int low, int mid, int high) {
    int temp[30];
    int i = low, j = low, m = mid + 1;

    while (j <= mid && m <= high) {
        if (array[j] <= array[m]) {
            temp[i++] = array[j++];
        } else {
            temp[i++] = array[m++];
        }
    }

    while (j <= mid) {
        temp[i++] = array[j++];
    }

    while (m <= high) {
        temp[i++] = array[m++];
    }

    for (int k = low; k <= high; k++) {
        array[k] = temp[k];
    }
}

void mergeSort(int array[], int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
#pragma omp parallel sections
        {
#pragma omp section
            {
                mergeSort(array, low, mid);
            }
#pragma omp section
            {
                mergeSort(array, mid + 1, high);
            }
        }
        merge(array, low, mid, high);
    }
}

int main() {
    int array[50];
    int size;

    cout << "Enter no of elements: " << endl;
    cin >> size;

    cout << "Enter elements: " << endl;
    for (int i = 0; i < size; i++) {
        cin >> array[i];
    }

    mergeSort(array, 0, size - 1);

    cout << "Sorted Array: " << endl;
    for (int i = 0; i < size; i++) {
        cout << array[i] << " ";
    }
    cout << endl;

    return 0;
}